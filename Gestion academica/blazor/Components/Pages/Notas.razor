@page "/docente/{idCurso:int}/{descCurso}/inscripciones"
@using API.Clients
@using DTOs
@inject InscripcionApi InscripcionApi
@inject IJSRuntime JS
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Authorization           
@using System.Security.Claims                                  
@inject AuthenticationStateProvider AuthProvider
<AuthorizeView Roles="Profesor">
    <Authorized>
        <h3>Alumno Inscriptos a @descCurso</h3>

        <div class="mb-3">
            <button class="btn btn-outline-danger" @onclick="ExportPdf">
                <i class="fas fa-file-pdf"></i> Exportar a PDF
            </button>
        </div>

        @if (loading)
        {
            <div class="d-flex justify-content-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Cargando...</span>
                </div>
            </div>
        }
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @successMessage
                <button type="button" class="btn btn-close" @onclick="() => successMessage = string.Empty"></button>
            </div>
        }
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
        @if (inscriptos is null || !inscriptos.Any())
        {
            <p>No hay alumnos inscriptos en este curso.</p>
        }
        else
        {
            <table id="tabla-inscriptos" class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Alumno</th>
                        <th>Email</th>
                        <th>Legajo</th>
                        <th>Condición</th>
                        <th>Nota Final</th>
                        <th style="width:200px"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var insc in inscriptos)
                    {
                        <tr>
                            <td>@insc.NombreAlumno</td>
                            <td>@insc.Alumno?.Email</td>
                            <td>@insc.Alumno?.Legajo</td>
                            <td>@insc.Condicion</td>
                            <td>@(insc.NotaFinal == -1 ? "-" : insc.NotaFinal)</td>
                            <td class="text-end">
                                <button class="btn btn-sm btn-outline-primary me-1"
                                @onclick="() => OpenAdministrarModal(insc)">
                                    <i class="fas fa-users"></i> Administrar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        <NotasModal @ref="modal"
        OnInsChange="OnParametersSetAsync"
        OnSuccess="ShowSuccess"
        OnError="ShowError" />
    </Authorized>

    <NotAuthorized>
        <div class="alert alert-danger m-3">Acceso no autorizado.</div>

    </NotAuthorized>
</AuthorizeView>
@code {
    [Parameter] public int idCurso { get; set; }
    [Parameter] public string descCurso { get; set; }
    [CascadingParameter] private Task<AuthenticationState>? AuthTask { get; set; }   // ✅

    private List<InscripcionDTO>? inscriptos;
    private bool loading = true;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;
    private NotasModal modal = null!;

    private Task OpenAdministrarModal(InscripcionDTO ins ) => modal.OpenAdministrarModal(ins);

    protected override async Task OnParametersSetAsync()
    {
        // ✅ Validaciones de acceso
        var authState = await (AuthTask ?? AuthProvider.GetAuthenticationStateAsync());
        var user = authState.User;

        if (!(user?.Identity?.IsAuthenticated ?? false))
        {
            Navigation.NavigateTo("/denied", true);
            return;
        }

        if (!TryGetPersonaId(user, out var personaId) || personaId <= 0)
        {
            Navigation.NavigateTo("/denied", true);
            return;
        }

        // ✅ Verificar que este profesor tenga asignado este curso
        try
        {
            var cursosDelDocente = await DocenteCursoApi.GetByDocente(personaId);
            var tieneCurso = cursosDelDocente?.Any(c => c.IDCurso == idCurso) == true;

            if (!tieneCurso)
            {
                Navigation.NavigateTo("/denied", true);
                return;
            }
        }
        catch
        {
            Navigation.NavigateTo("/denied", true);
            return;
        }

        // ✅ Cargar inscriptos del curso
        try
        {
            loading = true;
            errorMessage = string.Empty;
            inscriptos = await InscripcionApi.GetByCurso(idCurso);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar inscriptos: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }
    private static bool TryGetPersonaId(ClaimsPrincipal user, out int id)
    {
        var keys = new[] { "personaId", "persona_id", "idPersona", ClaimTypes.NameIdentifier, "sub" };
        foreach (var k in keys)
        {
            var v = user.FindFirst(k)?.Value;
            if (int.TryParse(v, out id)) return true;
        }
        id = 0; return false;
    }
    private async Task ExportPdf()
    {
        // Oculta la columna "Administrar" (última columna) antes de exportar
        await JS.InvokeVoidAsync("eval", @"
            const table = document.querySelector('#tabla-inscriptos');
            if (table) {
                const lastTh = table.querySelector('thead tr th:last-child');
                const lastTds = table.querySelectorAll('tbody tr td:last-child');
                lastTh.style.display = 'none';
                lastTds.forEach(td => td.style.display = 'none');
            }
        ");

        // Generar PDF
        var curso = inscriptos?.FirstOrDefault()?.DescCurso ?? $"{descCurso}";
        await JS.InvokeVoidAsync("exportTableToPdf", $"Inscriptos - {curso}", "#tabla-inscriptos");

        // Vuelve a mostrar la columna "Administrar" después de exportar
        await JS.InvokeVoidAsync("eval", @"
            const table = document.querySelector('#tabla-inscriptos');
            if (table) {
                const lastTh = table.querySelector('thead tr th:last-child');
                const lastTds = table.querySelectorAll('tbody tr td:last-child');
                lastTh.style.display = '';
                lastTds.forEach(td => td.style.display = '');
            }
        ");
    }

    private void ShowSuccess(string msg) => successMessage = msg;
    private void ShowError(string msg) => errorMessage = msg;
}

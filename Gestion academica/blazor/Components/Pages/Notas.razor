@page "/docente/{idCurso:int}/{descCurso}/inscripciones"
@using API.Clients
@using DTOs
@inject InscripcionApi InscripcionApi
@inject IJSRuntime JS

<h3>Alumno Inscriptos a @descCurso</h3>

<div class="mb-3">
    <button class="btn btn-outline-danger" @onclick="ExportPdf">
        <i class="fas fa-file-pdf"></i> Exportar a PDF
    </button>
</div>

@if (loading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @successMessage
        <button type="button" class="btn btn-close" @onclick="() => successMessage = string.Empty"></button>
    </div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
@if (inscriptos is null || !inscriptos.Any())
{
    <p>No hay alumnos inscriptos en este curso.</p>
}
else
{
    <table id="tabla-inscriptos" class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Alumno</th>
                <th>Email</th>
                <th>Legajo</th>
                <th>Condición</th>
                <th>Nota Final</th>
                <th style="width:200px"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var insc in inscriptos)
            {
                <tr>
                    <td>@insc.NombreAlumno</td>
                    <td>@insc.Alumno?.Email</td>
                    <td>@insc.Alumno?.Legajo</td>
                    <td>@insc.Condicion</td>
                    <td>@(insc.NotaFinal == -1 ? "-" : insc.NotaFinal)</td>
                    <td class="text-end">
                        <button class="btn btn-sm btn-outline-primary me-1"
                        @onclick="() => OpenAdministrarModal(insc)">
                            <i class="fas fa-users"></i> Administrar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<NotasModal @ref="modal"
OnInsChange="OnParametersSetAsync"
OnSuccess="ShowSuccess"
OnError="ShowError" />

@code {
    [Parameter] public int idCurso { get; set; }
    [Parameter] public string descCurso { get; set; }

    private List<InscripcionDTO>? inscriptos;
    private bool loading = true;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;
    private NotasModal modal = null!;

    private Task OpenAdministrarModal(InscripcionDTO ins ) => modal.OpenAdministrarModal(ins);

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            loading = true;
            errorMessage = string.Empty;
            inscriptos = await InscripcionApi.GetByCurso(idCurso);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar inscriptos: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task ExportPdf()
    {
        var curso = inscriptos?.FirstOrDefault()?.DescCurso ?? $"{descCurso}";
        await JS.InvokeVoidAsync("exportTableToPdf", $"Inscriptos - {curso}", "#tabla-inscriptos");
    }

    private void ShowSuccess(string msg) => successMessage = msg;
    private void ShowError(string msg) => errorMessage = msg;
}

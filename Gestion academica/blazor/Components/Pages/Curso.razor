@page "/cursos"
@using DTOs
@using API.Clients
@inject IJSRuntime JSRuntime
@inject CursoApi CursoApi
@inject MateriaApi MateriaApi
@inject ComisionApi ComisionApi
@rendermode InteractiveServer

<PageTitle>Cursos</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h3>Cursos</h3>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    @errorMessage
                    <button type="button" class="btn btn-close" @onclick="() => errorMessage = string.Empty"></button>
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @successMessage
                    <button type="button" class="btn btn-close" @onclick="() => successMessage = string.Empty"></button>
                </div>
            }

            <div class="mb-3">
                <button class="btn btn-primary" @onclick="OpenAddModal">
                    <i class="fas fa-plus"></i> Agregar
                </button>
            </div>

            @if (loading)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover align-middle">
                        <thead class="table-dark">
                            <tr>
                                <th>ID</th>
                                <th>Descripción</th>
                                <th>Materia</th>
                                <th>Comisión</th>
                                <th>Año</th>
                                <th>Cupo</th>
                                <th style="width:200px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (cursos is { Count: > 0 })
                            {
                                @foreach (var c in cursos)
                                {
                                    <tr>
                                        <td>@c.IdCurso</td>
                                        <td>@c.Descripcion</td>
                                        <td>@GetMateriaNombre(c.IDMateria)</td>
                                        <td>@GetComisionNombre(c.IDComision)</td>
                                        <td>@c.AnioCalendario</td>
                                        <td>@c.Cupo</td>
                                        <td class="text-end">
                                            <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => OpenEditModal(c)">
                                                <i class="fas fa-edit"></i> Editar
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(c)">
                                                <i class="fas fa-trash"></i> Eliminar
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="7" class="text-center text-muted">No hay cursos.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<CursoModal @ref="modal"
            OnCursoChange="LoadCursos"
            OnSuccess="ShowSuccess"
            OnError="ShowError" />

@code {
    private List<CursoDTO> cursos = new();
    private List<MateriaDTO> materias = new();
    private List<ComisionDTO> comisiones = new();

    private Dictionary<int, string> materiaById = new();
    private Dictionary<int, string> comisionById = new();

    private bool loading = true;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    private CursoModal modal = null!;

    protected override async Task OnInitializedAsync()
        => await LoadCursos();

    private async Task LoadCursos()
    {
        try
        {
            loading = true;
            errorMessage = string.Empty;

            // Catálogos para mostrar nombres
            materias = (await MateriaApi.GetAllAsync())?.ToList() ?? new();
            comisiones = (await ComisionApi.GetAllAsync())?.ToList() ?? new();

            materiaById = materias.ToDictionary(m => m.IDMateria, m => m.Descripcion);
            comisionById = comisiones.ToDictionary(c => c.IDComision, c => c.Descripcion);

            // Cursos
            cursos = (await CursoApi.GetAllAsync())?.ToList() ?? new();

            successMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar cursos: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private string GetMateriaNombre(int id)
        => materiaById.TryGetValue(id, out var nombre) ? nombre : "(sin materia)";

    private string GetComisionNombre(int id)
        => comisionById.TryGetValue(id, out var nombre) ? nombre : "(sin comisión)";

    private Task OpenAddModal() => modal.ShowAddModal();

    private Task OpenEditModal(CursoDTO curso) => modal.ShowEditModal(curso);

    private async Task ConfirmDelete(CursoDTO curso)
    {
        var mat = GetMateriaNombre(curso.IDMateria);
        var com = GetComisionNombre(curso.IDComision);

        var ok = await JSRuntime.InvokeAsync<bool>(
            "confirm",
            $"¿Eliminar el curso \"{curso.Descripcion}\" (ID {curso.IdCurso})\nMateria: {mat}\nComisión: {com}\nAño: {curso.AnioCalendario}?");
        if (ok)
            await DeleteCurso(curso.IdCurso);
    }

    private async Task DeleteCurso(int idCurso)
    {
        try
        {
            await CursoApi.DeleteAsync(idCurso);
            successMessage = "Curso eliminado correctamente.";
            await LoadCursos();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al eliminar: {ex.Message}";
        }
    }

    private void ShowSuccess(string msg) => successMessage = msg;
    private void ShowError(string msg) => errorMessage = msg;
}

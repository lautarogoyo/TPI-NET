
@page "/cursos"
@using DTOs
@using API.Clients
@inject IJSRuntime JSRuntime
@inject CursoApi CursoApi
@inject MateriaApi MateriaApi
@inject ComisionApi ComisionApi
@rendermode InteractiveServer
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization

<PageTitle>Cursos</PageTitle>

<AuthorizeView Roles="Admin">
    <Authorized>
        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <h3>Cursos</h3>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            @errorMessage
                            <button type="button" class="btn btn-close" @onclick="() => errorMessage = string.Empty"></button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            @successMessage
                            <button type="button" class="btn btn-close" @onclick="() => successMessage = string.Empty"></button>
                        </div>
                    }

                    <div class="mb-3">
                        <button class="btn btn-primary" @onclick="OpenAddModal">
                            <i class="fas fa-plus"></i> Agregar
                        </button>
                    </div>


                    @if (loading)
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover align-middle">
                                <thead class="table-dark">
                                    <tr>
                                        <th>ID</th>
                                        <th>Descripción</th>
                                        <th>Materia</th>
                                        <th>Comisión</th>
                                        <th>Año</th>
                                        <th>Cupo</th>
                                        <th>Hs Semanales</th>
                                        <th>Hs Totales</th>
                                        <th style="width:200px"></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (cursos is { Count: > 0 })
                                    {
                                        @foreach (var c in cursos)
                                        {
                                            <tr>
                                                <td>@c.IdCurso</td>
                                                <td>@c.Descripcion</td>
                                                <td>@c.DescMateria</td>
                                                <td>@c.DescComision</td>
                                                <td>@c.AnioCalendario</td>
                                                <td>@c.Cupo</td>
                                                <td>@c.HsSemanales</td>
                                                <td>@c.HsTotales</td>
                                                <td class="text-end">
                                                    <button class="btn btn-sm btn-outline-primary me-1"
                                                            @onclick="() => VerInscriptos(c)">
                                                        <i class="fas fa-users"></i> Ver inscriptos
                                                    </button>

                                                    <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => OpenEditModal(c)">
                                                        <i class="fas fa-edit"></i> Editar
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(c)">
                                                        <i class="fas fa-trash"></i> Eliminar
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="7" class="text-center text-muted">No hay cursos.</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>

        <CursoModal @ref="modal"
        OnCursoChange="LoadCursos"
        OnSuccess="ShowSuccess"
        OnError="ShowError" />
    </Authorized>

    <NotAuthorized>
        
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthTask { get; set; }

    private List<CursoDTO> cursos = new();

    private bool loading = true;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    private CursoModal modal = null!;

    protected override async Task OnInitializedAsync()
        => await LoadCursos();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || AuthTask is null) return;

        var user = (await AuthTask).User;
        var isAuth = user?.Identity?.IsAuthenticated ?? false;

        if (!isAuth)
            Navigation.NavigateTo("/login", true);
        else if (!user.IsInRole("Admin"))
            Navigation.NavigateTo("/denied");
    }
    private async Task LoadCursos()
    {
        try
        {
            loading = true;
            errorMessage = string.Empty;

            cursos = await CursoApi.GetWithComisionMateria();

            successMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar cursos: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private Task OpenAddModal() => modal.ShowAddModal();

    private Task OpenEditModal(CursoDTO curso) => modal.ShowEditModal(curso);

    private async Task ConfirmDelete(CursoDTO curso)
    {

        var ok = await JSRuntime.InvokeAsync<bool>(
            "confirm",
            $"¿Eliminar el curso \"{curso.Descripcion}\" (ID {curso.IdCurso})\nMateria: {curso.DescMateria}\nComisión: {curso.DescComision}\nAño: {curso.AnioCalendario}?");
        if (ok)
            await DeleteCurso(curso.IdCurso);
    }

    private async Task DeleteCurso(int idCurso)
    {
        try
        {
            await CursoApi.DeleteAsync(idCurso);
            successMessage = "Curso eliminado correctamente.";
            await LoadCursos();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al eliminar: {ex.Message}";
        }
    }

    private void VerInscriptos(CursoDTO curso)
    {
        Navigation.NavigateTo($"/cursos/{curso.IdCurso}/{curso.Descripcion}/inscripciones");

    }

    private void ShowSuccess(string msg) => successMessage = msg;
    private void ShowError(string msg) => errorMessage = msg;
}


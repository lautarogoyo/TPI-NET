@page "/usuario/{idP:int}/inscripciones"
@using DTOs
@using API.Clients
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject CursoApi CursoApi
@inject InscripcionApi InscripcionApi
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthProvider

<PageTitle>Inscripción a cursos</PageTitle>
<AuthorizeView Roles="Alumno">
    <Authorized>
        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <h3>Inscipción a Cursos</h3>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            @errorMessage
                            <button type="button" class="btn btn-close" @onclick="() => errorMessage = string.Empty"></button>
                        </div>
                    }


                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            @successMessage
                            <button type="button" class="btn btn-close" @onclick="() => successMessage = string.Empty"></button>
                        </div>
                    }
            
                    @if (loading)
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover align-middle">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Descripción</th>
                                        <th>Materia</th>
                                        <th>Comisión</th>
                                        <th>Año</th>
                                        <th>Cupo</th>
                                        <th>Hs Semanales</th>
                                        <th>Hs Totales</th>
                                        <th>Cupos Disp.</th>
                                        <th style="width:200px"></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (cursos.Count > 0)
                                    {
                                        @foreach (var c in cursos)
                                        {
                                            <tr>
                                                <td>@c.Descripcion</td>
                                                <td>@c.DescMateria</td>
                                                <td>@c.DescComision</td>
                                                <td>@c.AnioCalendario</td>
                                                <td>@c.Cupo</td>
                                                <td>@c.HsSemanales</td>
                                                <td>@c.HsTotales</td>
                                                <td>@c.CuposDisponibles</td>
                                                <td class="text-end">
                                                    <button class="btn btn-sm btn-outline-primary me-1"
                                                    @onclick="() => Inscribirse(c)"
                                                    disabled="@(c.CuposDisponibles < 1)">
                                                <i>@(c.CuposDisponibles < 1 ? "Cupos Agotados" : "Inscribirse")</i>
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="7" class="text-center text-muted">No hay cursos.</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </Authorized>

    <NotAuthorized>
        <div class="alert alert-danger m-3">Acceso no autorizado.</div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter] public int IdP { get; set; }
    [CascadingParameter] private Task<AuthenticationState>? AuthTask { get; set; }

    private List<CursoDTO> cursos = new();
    private List<InscripcionDTO> inscripciones = new();
    private InscripcionDTO nuevaInscripcion = new InscripcionDTO();
    private bool loading = true;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        var authState = await (AuthTask ?? AuthProvider.GetAuthenticationStateAsync());
        var user = authState.User;

        if (!(user?.Identity?.IsAuthenticated ?? false))
        {
            Navigation.NavigateTo("/denied", true);
            return;
        }

        if (!user.IsInRole("Alumno"))
        {
            Navigation.NavigateTo("/denied", true);
            return;
        }

        var claimId = user.FindFirst("personaid")?.Value
                   ?? user.FindFirst("idPersona")?.Value
                   ?? user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (!int.TryParse(claimId, out var personaId))
        {
            Navigation.NavigateTo("/denied", true);
            return;
        }

        if (personaId != IdP)
        {
            Navigation.NavigateTo("/denied", true);
            return;
        }

        await LoadCursos(personaId);
    }

    private async Task LoadCursos(int personaId)
    {
        try
        {
            loading = true;
            errorMessage = string.Empty;

            inscripciones = await InscripcionApi.GetByAlumno(personaId);
            cursos = await CursoApi.GetWithComisionMateria();

            cursos = cursos
                .Where(c => !inscripciones.Any(i => i.IDCurso == c.IdCurso))
                .ToList();

            foreach (var curso in cursos)
                curso.CuposDisponibles = curso.Cupo - await InscripcionApi.CuantosInscriptos(curso.IdCurso);

        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar cursos: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task Inscribirse(CursoDTO curso)
    {
        try
        {
            var dto = new InscripcionDTO
                {
                    IDCurso = curso.IdCurso,
                    IDAlumno = IdP, 
                    Condicion = "Cursando",
                    NotaFinal = -1
                };

            await InscripcionApi.AddAsync(dto);
            ShowSuccess("Inscripción realizada con éxito.");
            await LoadCursos(IdP);
        }
        catch (Exception ex)
        {
            ShowError($"Error al inscribirse: {ex.Message}");
        }
    }

    private void ShowSuccess(string msg) => successMessage = msg;
    private void ShowError(string msg) => errorMessage = msg;
}


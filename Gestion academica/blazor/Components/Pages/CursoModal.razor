@using DTOs
@using API.Clients
@inject IJSRuntime JS

@if (Visible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content shadow">
                <div class="modal-header">
                    <h5 class="modal-title">@((IsEdit ? "Modificar" : "Agregar") + " Curso")</h5>
                    <button type="button" class="btn-close" @onclick="Close"></button>
                </div>

                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Descripción</label>
                        <input class="form-control" @bind="Curso.Descripcion" />
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Año Calendario</label>
                            <input class="form-control" type="number" @bind="Curso.AnioCalendario" />
                        </div>

                        <div class="col-md-6 mb-3">
                            <label class="form-label">Cupo</label>
                            <input class="form-control" type="number" @bind="Curso.Cupo" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Comisión</label>
                        <select class="form-select"
                                @onchange="OnComisionChanged"
                                disabled="@(!ComisionHabilitada)">
                            <option value="">-- Seleccione una comisión --</option>
                            @foreach (var com in Comisiones)
                            {
                                <option value="@com.IDComision" selected="@(SelectedComisionId == com.IDComision)">
                                    @com.Descripcion
                                </option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Materia</label>
                        <select class="form-select"
                                @bind="Curso.IDComisionMateria"
                                disabled="@(!MateriaHabilitada)">
                            <option value="">-- Seleccione una materia --</option>
                            @foreach (var cm in ComisionesMaterias)
                            {
                                <option value="@cm.IDComisionMateria">@cm.DescMateria</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="Close">Cancelar</button>
                    <button class="btn btn-primary" @onclick="SaveCursoAsync">Guardar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter] public EventCallback OnSaved { get; set; }
    [Parameter] public EventCallback<string> OnSuccess { get; set; }
    [Parameter] public EventCallback<string> OnError { get; set; }
    [Parameter] public EventCallback<string> OnCursoChange { get; set; }

    private CursoDTO Curso = new();
    private bool IsEdit => Curso != null && Curso.IdCurso > 0;

    private List<ComisionDTO> Comisiones = new();
    private List<ComisionMateriaDTO> ComisionesMaterias = new();

    private int? SelectedComisionId;
    private bool ComisionHabilitada = true;
    private bool MateriaHabilitada = false;

    public async Task ShowAddModal()
    {
        Visible = true;
        Curso = new CursoDTO();
        ComisionHabilitada = true;
        MateriaHabilitada = false;
        SelectedComisionId = null;
        ComisionesMaterias.Clear();

        await LoadComisionesAsync();
        await InvokeAsync(StateHasChanged);
    }

    public async Task ShowEditModal(CursoDTO curso)
    {
        Visible = true;
        Curso = curso;
        ComisionHabilitada = false;
        MateriaHabilitada = false;

        await LoadComisionesAsync();

        if (Curso.IDComision != null && Curso.IDComision > 0)
        {
            SelectedComisionId = Curso.IDComision;
            await LoadMateriasPorComisionAsync(Curso.IDComision.Value);
            MateriaHabilitada = false; 
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadComisionesAsync()
    {
        try
        {
            Comisiones = (await ComisionApi.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al cargar comisiones: {ex.Message}");
        }
    }

    private async Task OnComisionChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int id))
        {
            SelectedComisionId = id;
            await LoadMateriasPorComisionAsync(id);
        }
        else
        {
            SelectedComisionId = null;
            ComisionesMaterias.Clear();
        }
    }

    private async Task LoadMateriasPorComisionAsync(int idComision)
    {
        try
        {
            ComisionesMaterias = (await ComisionMateriaApi.GetByComisionAsync(idComision)).ToList();
            MateriaHabilitada = true;
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al cargar materias: {ex.Message}");
        }
    }

    private async Task SaveCursoAsync()
    {
        if (!ValidateCurso())
            return;

        try
        {
            if (IsEdit)
                await CursoApi.UpdateAsync(Curso);
            else
                await CursoApi.AddAsync(Curso);

            await JS.InvokeVoidAsync("alert", "Curso guardado correctamente.");
            await OnSaved.InvokeAsync();
            Visible = false;
            await OnCursoChange.InvokeAsync();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al guardar el curso: {ex.Message}");
        }
    }

    private bool ValidateCurso()
    {
        if (string.IsNullOrWhiteSpace(Curso?.Descripcion))
        {
            JS.InvokeVoidAsync("alert", "La descripción no puede estar vacía.");
            return false;
        }

        if (Curso.AnioCalendario <= 0)
        {
            JS.InvokeVoidAsync("alert", "El año debe ser válido.");
            return false;
        }

        if (Curso.Cupo <= 0)
        {
            JS.InvokeVoidAsync("alert", "El cupo debe ser válido.");
            return false;
        }

        if (SelectedComisionId == null)
        {
            JS.InvokeVoidAsync("alert", "Debe seleccionar una comisión.");
            return false;
        }

        if (Curso.IDComisionMateria == null || Curso.IDComisionMateria <= 0)
        {
            JS.InvokeVoidAsync("alert", "Debe seleccionar una materia.");
            return false;
        }

        return true;
    }

    private async Task Close()
    {
        Visible = false;
        await VisibleChanged.InvokeAsync(false);
    }
}

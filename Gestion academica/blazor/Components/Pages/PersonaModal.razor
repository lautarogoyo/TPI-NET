@using DTOs
@using API.Clients
@inject IJSRuntime JSRuntime

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.4);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">@Titulo</h5>
                    <button type="button" class="btn-close" @onclick="Cerrar"></button>
                </div>

                <div class="modal-body">
                    <EditForm Model="Persona" OnValidSubmit="Guardar">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">Nombre</label>
                                <InputText class="form-control" @bind-Value="Persona.Nombre" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Apellido</label>
                                <InputText class="form-control" @bind-Value="Persona.Apellido" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Email</label>
                                <InputText class="form-control" @bind-Value="Persona.Email" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Dirección</label>
                                <InputText class="form-control" @bind-Value="Persona.Direccion" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Teléfono</label>
                                <InputText class="form-control" @bind-Value="Persona.Telefono" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Legajo</label>
                                <InputText class="form-control" @bind-Value="Persona.Legajo" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Tipo Documento</label>
                                <InputSelect class="form-select" @bind-Value="Persona.TipoDoc">
                                    <option value="">Seleccione...</option>
                                    @foreach (var doc in TiposDocumento)
                                    {
                                        <option value="@doc.Value">@doc.Text</option>
                                    }
                                </InputSelect>
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">N° Documento</label>
                                <InputText class="form-control" @bind-Value="Persona.NroDoc" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Fecha Nacimiento</label>
                                <InputDate class="form-control" @bind-Value="Persona.FechaNac" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Tipo Persona</label>
                                <InputSelect class="form-select" @bind-Value="Persona.TipoPersona" disabled>
                                    <option value="1">Alumno</option>
                                    <option value="2">Profesor</option>
                                </InputSelect>
                            </div>
                        </div>
                    </EditForm>
                </div>

                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="Cerrar">Cancelar</button>
                    <button class="btn btn-success" @onclick="Guardar">Aceptar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool IsVisible = false;
    private string Titulo = string.Empty;

    private string Tipo = string.Empty;
    private int Numero;

    private PersonaDTO Persona = new();

    private List<(string Text, string Value)> TiposDocumento = new()
    {
        ("DNI", "DNI"),
        ("Libreta Cívica", "LC"),
        ("Libreta de Enrolamiento", "LE")
    };

    private bool EsEdicion = false;

    public void ShowAddModal(int numero, string tipo)
    {
        Numero = numero;
        Tipo = tipo;
        EsEdicion = false;

        Titulo = $"Agregar {Tipo}";
        Persona = new PersonaDTO
            {
                TipoPersona = numero,
                FechaNac = DateOnly.FromDateTime(DateTime.Today)
            };

        IsVisible = true;
        StateHasChanged();
    }

    public void ShowEditModal(PersonaDTO persona, int numero, string tipo)
    {
        Numero = numero;
        Tipo = tipo;
        EsEdicion = true;

        Titulo = $"Modificar {Tipo}";
        Persona = new PersonaDTO
            {
                IDPersona = persona.IDPersona,
                Nombre = persona.Nombre,
                Apellido = persona.Apellido,
                Email = persona.Email,
                Direccion = persona.Direccion,
                Telefono = persona.Telefono,
                Legajo = persona.Legajo,
                TipoDoc = persona.TipoDoc,
                NroDoc = persona.NroDoc,
                FechaNac = persona.FechaNac,
                TipoPersona = persona.TipoPersona
            };

        IsVisible = true;
        StateHasChanged();
    }

    private async Task Guardar()
    {
        if (!ValidarCampos())
            return;

        try
        {
            if (EsEdicion)
            {
                if (Persona.IDPersona <= 0)
                    throw new InvalidOperationException("ID de persona inválido.");

                await PersonaApi.UpdateAsync(Persona);
                await JSRuntime.InvokeVoidAsync("alert", $"{Tipo} actualizado exitosamente.");
            }
            else
            {
                await PersonaApi.AddAsync(Persona);
                await JSRuntime.InvokeVoidAsync("alert", $"{Tipo} agregado exitosamente.");
            }

            IsVisible = false;
            OnPersonaChange.InvokeAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al guardar: {ex.Message}");
        }
    }

    private void Cerrar()
    {
        IsVisible = false;
        StateHasChanged();
    }

    private bool ValidarCampos()
    {
        if (string.IsNullOrWhiteSpace(Persona.Nombre))
        {
            _ = JSRuntime.InvokeVoidAsync("alert", "El nombre no puede estar vacío.");
            return false;
        }
        if (string.IsNullOrWhiteSpace(Persona.Apellido))
        {
            _ = JSRuntime.InvokeVoidAsync("alert", "El apellido no puede estar vacío.");
            return false;
        }
        if (string.IsNullOrWhiteSpace(Persona.Email))
        {
            _ = JSRuntime.InvokeVoidAsync("alert", "El email no puede estar vacío.");
            return false;
        }
        if (string.IsNullOrWhiteSpace(Persona.Direccion))
        {
            _ = JSRuntime.InvokeVoidAsync("alert", "La dirección no puede estar vacía.");
            return false;
        }
        if (string.IsNullOrWhiteSpace(Persona.Telefono))
        {
            _ = JSRuntime.InvokeVoidAsync("alert", "El teléfono no puede estar vacío.");
            return false;
        }
        if (string.IsNullOrWhiteSpace(Persona.Legajo))
        {
            _ = JSRuntime.InvokeVoidAsync("alert", "El legajo no puede estar vacío.");
            return false;
        }
        if (string.IsNullOrWhiteSpace(Persona.TipoDoc))
        {
            _ = JSRuntime.InvokeVoidAsync("alert", "Debe seleccionar un tipo de documento.");
            return false;
        }
        if (string.IsNullOrWhiteSpace(Persona.NroDoc))
        {
            _ = JSRuntime.InvokeVoidAsync("alert", "El número de documento no puede estar vacío.");
            return false;
        }
        if (Persona.FechaNac == default)
        {
            _ = JSRuntime.InvokeVoidAsync("alert", "Debe seleccionar una fecha de nacimiento válida.");
            return false;
        }

        return true;
    }

    [Parameter] public EventCallback OnPersonaChange { get; set; }
}

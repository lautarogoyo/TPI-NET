@page "/planes"
@using DTOs
@using API.Clients
@inject IJSRuntime JSRuntime
@inject PlanApi PlanApi
@inject EspecialidadApi EspecialidadApi
@rendermode InteractiveServer

<PageTitle>Planes</PageTitle>

<AuthorizeView Roles="Admin">
    <Authorized>
        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <h3>Planes</h3>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            @errorMessage
                            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            @successMessage
                            <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
                        </div>
                    }

                    <div class="mb-3">
                        <button class="btn btn-primary" @onclick="OpenAddModal">
                            <i class="fas fa-plus"></i> Agregar
                        </button>
                    </div>

                    @if (loading)
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Id</th>
                                        <th>Descripción</th>
                                        <th>Especialidad</th>
                                        <th style="width:160px"></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (planes is { Count: > 0 })
                                    {
                                        @foreach (var plan in planes)
                                        {
                                            <tr>
                                                <td>@plan.IDPlan</td>
                                                <td>@plan.DescPlan</td>
                                                <td>@GetEspecialidadDesc(plan.IDEspecialidad)</td>
                                                <td class="text-end">
                                                    <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => OpenEditModal(plan)">
                                                        <i class="fas fa-edit"></i> Editar
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(plan)">
                                                        <i class="fas fa-trash"></i> Eliminar
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4" class="text-center text-muted">No hay planes.</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Si tenés un modal específico para Plan -->
        <PlanModal @ref="modal"
                   OnPlanChanged="LoadData"
                   OnSuccess="ShowSuccess"
                   OnError="ShowError" />
    </Authorized>

    <NotAuthorized>
        @code {
        protected override void OnAfterRender(bool firstRender)
        {
            if (firstRender)
                Navigation.NavigateTo("/denied", true);
        }
        }
    </NotAuthorized>
</AuthorizeView>
@code {
    private List<PlanDTO> planes = new();
    private List<EspecialidadDTO> especialidades = new();
    private Dictionary<int, string> especialidadById = new();
    private bool loading = true;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private PlanModal modal = null!;

    protected override async Task OnInitializedAsync() => await LoadData();

    private async Task LoadData()
    {
        try
        {
            loading = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            // Carga en paralelo
            var planesTask = PlanApi.GetAllAsync();
            var espTask = EspecialidadApi.GetAllAsync();

            planes = (await planesTask)?.ToList() ?? new();
            especialidades = (await espTask)?.ToList() ?? new();

            // Diccionario Id -> Descripción para resolver en la vista
            especialidadById = especialidades.ToDictionary(e => e.IDEspecialidad, e => e.Descripcion);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar planes/especialidades: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private string GetEspecialidadDesc(int idEsp)
        => especialidadById.TryGetValue(idEsp, out var desc) ? desc : "(sin especialidad)";

    private Task OpenAddModal() => modal.ShowAddModal();

    private Task OpenEditModal(PlanDTO plan) => modal.ShowEditModal(plan);

    private async Task ConfirmDelete(PlanDTO plan)
    {
        var ok = await JSRuntime.InvokeAsync<bool>("confirm",
            $"¿Está seguro que desea eliminar el plan \"{plan.DescPlan}\" (ID {plan.IDPlan})?");
        if (ok)
            await DeletePlan(plan.IDPlan);
    }

    private async Task DeletePlan(int id)
    {
        try
        {
            await PlanApi.DeleteAsync(id);
            successMessage = "Plan eliminado exitosamente.";
            await LoadData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al eliminar: {ex.Message}";
        }
    }

    private void ShowSuccess(string msg) => successMessage = msg;
    private void ShowError(string msg) => errorMessage = msg;
}

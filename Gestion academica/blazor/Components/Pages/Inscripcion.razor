@*
@page "/inscripciones"
@using DTOs
@using API.Clients
@inject IJSRuntime JSRuntime
@inject InscripcionApi AlumnoInscripcionApi
@inject PersonaApi PersonaApi
@inject CursoApi CursoApi
@rendermode InteractiveServer

<PageTitle>Inscripciones</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h3>Inscripciones</h3>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    @errorMessage
                    <button type="button" class="btn btn-close" @onclick="() => errorMessage = string.Empty"></button>
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @successMessage
                    <button type="button" class="btn btn-close" @onclick="() => successMessage = string.Empty"></button>
                </div>
            }

            <div class="mb-3">
                <button class="btn btn-primary" @onclick="OpenAddModal">
                    <i class="fas fa-plus"></i> Agregar
                </button>
            </div>

            @if (loading)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover align-middle">
                        <thead class="table-dark">
                            <tr>
                                <th>Id</th>
                                <th>Alumno</th>
                                <th>Curso</th>
                                <th>Condición</th>
                                <th>Nota</th>
                                <th style="width:180px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (inscripciones is { Count: > 0 })
                            {
                                @foreach (var ins in inscripciones)
                                {
                                    <tr>
                                        <td>@ins.IDInscripcion</td>
                                        <td>@GetAluNombre(ins.IDAlumno)</td>
                                        <td>@GetCursoNombre(ins.IDCurso)</td>
                                        <td>@ins.Condicion</td>
                                        <td>@ins.Nota</td>

                                        <td class="text-end">
                                            <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => OpenEditModal(ins)">
                                                <i class="fas fa-edit"></i> Editar
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(ins)">
                                                <i class="fas fa-trash"></i> Eliminar
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="10" class="text-center text-muted">No hay inscripciones.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<InscripcionModal @ref="modal"
                  OnInscripcionChange="LoadInscripciones"
                  OnSuccess="ShowSuccess"
                  OnError="ShowError" />

@code {
    private List<AlumnoInscripcionDTO> inscripciones = new();
    private List<PersonaDTO> personas = new();
    private List<CursoDTO> cursos = new();

    private Dictionary<int, string> personaById = new();
    private Dictionary<int, string> cursoById = new();

    private bool loading = true;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    // ¡Este es el modal correcto!
    private InscripcionModal modal = null!;

    protected override async Task OnInitializedAsync()
        => await LoadInscripciones();

    private async Task LoadInscripciones()
    {
        try
        {
            loading = true;
            errorMessage = string.Empty;

            // Traigo catálogos primero (para mapear nombres)
            personas = (await PersonaApi.GetAllAsync())?.ToList() ?? new();
            cursos = (await CursoApi.GetAllAsync())?.ToList() ?? new();

            personaById = personas.ToDictionary(p => p.IDPersona, p => $"{p.Apellido}, {p.Nombre}".Trim(' ', ','));
            cursoById = cursos.ToDictionary(c => c.IdCurso, c => c.Descripcion);

            // Ahora sí, las inscripciones
            inscripciones = (await AlumnoInscripcionApi.GetAllAsync())?.ToList() ?? new();

            successMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar inscripciones: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private string GetAluNombre(int idAlu)
        => personaById.TryGetValue(idAlu, out var nombre) ? nombre : "(sin persona)";

    private string GetCursoNombre(int idCur)
        => cursoById.TryGetValue(idCur, out var nombre) ? nombre : "(sin curso)";

    private Task OpenAddModal() => modal.ShowAddModal();

    private Task OpenEditModal(AlumnoInscripcionDTO inscripcion)
        => modal.ShowEditModal(inscripcion);

    private async Task ConfirmDelete(AlumnoInscripcionDTO ins)
    {
        var alu = GetAluNombre(ins.IDAlumno);
        var cur = GetCursoNombre(ins.IDCurso);

        var ok = await JSRuntime.InvokeAsync<bool>(
            "confirm",
            $"¿Eliminar la inscripción #{ins.IDInscripcion} de \"{alu}\" en \"{cur}\"?");
        if (ok)
            await DeleteInscripcion(ins.IDInscripcion);
    }

    private async Task DeleteInscripcion(int idInscripcion)
    {
        try
        {
            await InscripcionApi.DeleteAsync(idInscripcion);
            successMessage = "Inscripción eliminada correctamente.";
            await LoadInscripciones();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al eliminar: {ex.Message}";
        }
    }

    private void ShowSuccess(string msg) => successMessage = msg;
    private void ShowError(string msg) => errorMessage = msg;
}
*@
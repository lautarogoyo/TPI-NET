@using DTOs
@using API.Clients
@inject IJSRuntime JSRuntime

<div class="modal fade @(IsVisible ? "show d-block" : "")" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@ModalTitle</h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>

            <div class="modal-body">
                @if (IsLoading)
                {
                    <div class="text-center p-3">
                        <div class="spinner-border" role="status"></div>
                    </div>
                }
                else
                {
                    <div class="form-group mb-3">
                        <label>Curso</label>
                        <select class="form-select" @bind="SelectedCursoId">
                            <option value="">Seleccione un curso</option>
                            @foreach (var c in Cursos)
                            {
                                <option value="@c.IdCurso">@c.Descripcion</option>
                            }
                        </select>
                    </div>

                    <div class="form-group mb-3">
                        <label>Docente</label>
                        <select class="form-select" @bind="SelectedDocenteId">
                            <option value="">Seleccione un docente</option>
                            @foreach (var d in Docentes)
                            {
                                <option value="@d.IDPersona">@d.NombreCompleto</option>
                            }
                        </select>
                    </div>

                    <div class="form-group mb-3">
                        <label>Cargo</label>
                        <select class="form-select" @bind="SelectedCargo">
                            <option value="">Seleccione un cargo</option>
                            @foreach (var cargo in Cargos)
                            {
                                <option value="@cargo">@cargo</option>
                            }
                        </select>
                    </div>
                }
            </div>

            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                <button class="btn btn-primary" @onclick="Guardar">Guardar</button>
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public EventCallback OnDCChange { get; set; }

    private bool IsVisible { get; set; }
    private bool IsLoading { get; set; }
    private string ModalTitle { get; set; } = "Agregar Docente-Curso";

    private DocenteCursoDTO? DocenteCurso { get; set; }

    private List<CursoDTO> Cursos = new();
    private List<PersonaDTO> Docentes = new();
    private List<TiposCargos> Cargos = Enum.GetValues<TiposCargos>().ToList();

    private int? SelectedCursoId { get; set; }
    private int? SelectedDocenteId { get; set; }
    private TiposCargos? SelectedCargo { get; set; }

  
    public async void ShowAddModal()
    {
        ModalTitle = "Agregar Docente-Curso";
        DocenteCurso = null;

        SelectedCursoId = null;
        SelectedDocenteId = null;
        SelectedCargo = null;

        await CargarDatosAsync();
        IsVisible = true;
        StateHasChanged();
    }
    

    public async void ShowEditModal(DocenteCursoDTO dc)
    {
        ModalTitle = "Modificar Docente-Curso";
        DocenteCurso = dc;
        await CargarDatosAsync();

        SelectedCursoId = dc.IDCurso;
        SelectedDocenteId = dc.IDDocente;
        SelectedCargo = dc.Cargo;

        IsVisible = true;
        StateHasChanged();
    }

    private async Task CargarDatosAsync()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            Cursos = (await CursoApi.GetAllAsync()).ToList();
            Docentes = (await PersonaApi.GetAllAsync())
                .Where(p => p.TipoPersona == 2)
                .ToList();
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task Guardar()
    {
        if (SelectedCursoId == null || SelectedDocenteId == null || SelectedCargo == null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Debe completar todos los campos.");
            return;
        }

        try
        {
            var docenteCurso = DocenteCurso ?? new DocenteCursoDTO();
            docenteCurso.IDCurso = SelectedCursoId.Value;
            docenteCurso.IDDocente = SelectedDocenteId.Value;
            docenteCurso.Cargo = SelectedCargo.Value;

            // Validar si ya existe
            var existentes = await DocenteCursoApi.GetAllAsync();
            var existing = existentes.FirstOrDefault(dc =>
                dc.IDDocente == docenteCurso.IDDocente &&
                dc.IDCurso == docenteCurso.IDCurso);

            if (existing != null && DocenteCurso == null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Este docente ya está asignado a este curso.");
                return;
            }

            if (DocenteCurso == null)
                await DocenteCursoApi.AddAsync(docenteCurso);
            else
                await DocenteCursoApi.UpdateAsync(docenteCurso);

            await JSRuntime.InvokeVoidAsync("alert", "Cambios guardados correctamente.");
            await OnDCChange.InvokeAsync();
            CloseModal();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al guardar: {ex.Message}");
        }
    }

    private void CloseModal()
    {
        IsVisible = false;
        StateHasChanged();
    }
}

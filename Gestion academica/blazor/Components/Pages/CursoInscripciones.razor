@page "/cursos/{idCurso:int}/inscripciones"
@using API.Clients
@using DTOs
@inject InscripcionApi InscripcionApi
@inject IJSRuntime JS

<h3>Inscriptos del curso @idCurso</h3>

<div class="mb-3">
    <button class="btn btn-outline-danger" @onclick="ExportPdf">
        <i class="fas fa-file-pdf"></i> Exportar a PDF
    </button>
</div>

@if (loading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (inscriptos is null || !inscriptos.Any())
{
    <p>No hay alumnos inscriptos en este curso.</p>
}
else
{
    <table id="tabla-inscriptos" class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>ID Inscripción</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Email</th>
                <th>Condición</th>
                <th>Nota Final</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var insc in inscriptos)
            {
                <tr>
                    <td>@insc.IDInscripcion</td>
                    <td>@insc.Alumno?.Nombre</td>
                    <td>@insc.Alumno?.Apellido</td>
                    <td>@insc.Alumno?.Email</td>
                    <td>@insc.Condicion</td>
                    <td>@insc.NotaFinal</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public int idCurso { get; set; }
    private List<InscripcionDTO>? inscriptos;
    private bool loading = true;
    private string errorMessage = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            loading = true;
            errorMessage = string.Empty;
            inscriptos = await InscripcionApi.GetByCurso(idCurso);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar inscriptos: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task ExportPdf()
    {
        var curso = inscriptos?.FirstOrDefault()?.DescCurso ?? $"Curso {idCurso}";
        await JS.InvokeVoidAsync("exportTableToPdf", $"Inscriptos - {curso}", "#tabla-inscriptos");
    }
}

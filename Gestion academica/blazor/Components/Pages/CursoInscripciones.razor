@page "/cursos/{idCurso:int}/{descCurso}/inscripciones"
@using API.Clients
@using DTOs
@inject InscripcionApi InscripcionApi
@inject IJSRuntime JS
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization

<h3>Alumno Inscriptos a @descCurso</h3>

<AuthorizeView Roles="Admin">
    <Authorized>
        <div class="mb-3">
            <button class="btn btn-outline-danger" @onclick="ExportPdf">
                <i class="fas fa-file-pdf"></i> Exportar a PDF
            </button>
        </div>

        @if (loading)
        {
            <div class="d-flex justify-content-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Cargando...</span>
                </div>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
        else if (inscriptos is null || !inscriptos.Any())
        {
            <p>No hay alumnos inscriptos en este curso.</p>
        }
        else
        {
            <table id="tabla-inscriptos" class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Alumno</th>
                        <th>Email</th>
                        <th>Legajo</th>
                        <th>Condición</th>
                        <th>Nota Final</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var insc in inscriptos)
                    {
                        <tr>
                            <td>@insc.NombreAlumno</td>
                            <td>@insc.Alumno?.Email</td>
                            <td>@insc.Alumno?.Legajo</td>
                            <td>@insc.Condicion</td>
                            <td>@(insc.NotaFinal == -1 ? "-" : insc.NotaFinal)</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>

    <NotAuthorized>
        
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthTask { get; set; }

    [Parameter] public int idCurso { get; set; }
    [Parameter] public string descCurso { get; set; }

    private List<InscripcionDTO>? inscriptos;
    private bool loading = true;
    private string errorMessage = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            loading = true;
            errorMessage = string.Empty;
            inscriptos = await InscripcionApi.GetByCurso(idCurso);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar inscriptos: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || AuthTask is null) return;

        var user = (await AuthTask).User;
        var isAuth = user?.Identity?.IsAuthenticated ?? false;

        if (!isAuth)
            Navigation.NavigateTo("/login", true);
        else if (!user.IsInRole("Admin"))
            Navigation.NavigateTo("/denied");
    }
    private async Task ExportPdf()
    {
        var curso = inscriptos?.FirstOrDefault()?.DescCurso ?? $"{descCurso}";
        await JS.InvokeVoidAsync("exportTableToPdf", $"Inscriptos - {curso}", "#tabla-inscriptos");
    }
}

@*
@using DTOs
@using API.Clients
@inject InscripcionApi AlumnoInscripcionApi
@inject PersonaApi PersonaApi
@inject CursoApi CursoApi

@if (visible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@title</h5>
                    <button type="button" class="btn-close" @onclick="Hide"></button>
                </div>

                <EditForm Model="@model"
                          OnValidSubmit="@SaveAsync"
                          FormName="inscripcion-form"
                          ValidateOnInput="true">
                    <AntiforgeryToken />
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="modal-body">
                        @if (loadingCatalogos)
                        {
                            <div class="d-flex justify-content-center my-3">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Cargando catálogos...</span>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label class="form-label">Alumno</label>
                                    <InputSelect @bind-Value="model.IDAlumno" TValue="int" class="form-select">
                                        <option value="0" disabled>-- Seleccionar alumno --</option>
                                        @foreach (var p in alumnos)
                                        {
                                            <option value="@p.IDPersona">@($"{p.Apellido}, {p.Nombre}".Trim(' ', ','))</option>
                                        }
                                    </InputSelect>
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label">Curso</label>
                                    <InputSelect @bind-Value="model.IDCurso" TValue="int" class="form-select">
                                        <option value="0" disabled>-- Seleccionar curso --</option>
                                        @foreach (var c in cursos)
                                        {
                                            <option value="@c.IdCurso">@c.Descripcion</option>
                                        }
                                    </InputSelect>
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label">Condición</label>
                                    <!-- Si preferís libre texto, cambiá por InputText -->
                                    <InputSelect @bind-Value="model.Condicion" class="form-select">
                                        <option value="">-- Seleccionar condición --</option>
                                        @foreach (var opt in condiciones)
                                        {
                                            <option value="@opt">@opt</option>
                                        }
                                    </InputSelect>
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label">Nota (opcional)</label>
                                    <InputNumber @bind-Value="model.Nota" class="form-control" />
                                    <small class="text-muted">Dejar vacío si aún no tiene nota.</small>
                                </div>

                                @if (model.IDInscripcion != 0)
                                {
                                    <div class="col-12">
                                        <div class="text-muted"><small>ID inscripción: @model.IDInscripcion</small></div>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(localError))
                                {
                                    <div class="col-12">
                                        <div class="alert alert-danger">@localError</div>
                                    </div>
                                }
                            </div>
                        }
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-secondary" @onclick="Hide" disabled="@saving">Cancelar</button>
                        <button type="submit" class="btn btn-primary" disabled="@saving">
                            <i class="fas fa-save"></i> Guardar
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    // UI
    private bool visible;
    private bool saving;
    private bool loadingCatalogos;
    private string title = "Nueva inscripción";
    private string localError = string.Empty;

    // Modelo
    private AlumnoInscripcionDTO model = new()
        {
            IDInscripcion = 0,
            IDAlumno = 0,
            IDCurso = 0,
            Condicion = string.Empty,
            Nota = 0
        };

    // Catálogos
    private List<PersonaDTO> alumnos = new();
    private List<CursoDTO> cursos = new();

    // Opciones de condición (ajustá a tu dominio)
    private readonly List<string> condiciones = new() { "Regular", "Aprobado", "Libre", "Cursando" };

    // Callbacks al padre
    [Parameter] public EventCallback OnInscripcionChange { get; set; }
    [Parameter] public EventCallback<string> OnSuccess { get; set; }
    [Parameter] public EventCallback<string> OnError { get; set; }

    public async Task ShowAddModal()
    {
        title = "Nueva inscripción";
        model = new()
            {
                IDInscripcion = 0,
                IDAlumno = 0,
                IDCurso = 0,
                Condicion = string.Empty,
                Nota = 0
            };
        localError = string.Empty;
        await EnsureCatalogosLoaded();
        visible = true;
        StateHasChanged();
    }

    public async Task ShowEditModal(AlumnoInscripcionDTO dto)
    {
        title = $"Editar inscripción (ID {dto.IDInscripcion})";
        model = new()
            {
                IDInscripcion = dto.IDInscripcion,
                IDAlumno = dto.IDAlumno,
                IDCurso = dto.IDCurso,
                Condicion = dto.Condicion,
                Nota = dto.Nota
            };
        localError = string.Empty;
        await EnsureCatalogosLoaded();
        visible = true;
        StateHasChanged();
    }

    private void Hide()
    {
        visible = false;
        localError = string.Empty;
    }

    private async Task EnsureCatalogosLoaded()
    {
        if (alumnos.Count > 0 && cursos.Count > 0) return;

        try
        {
            loadingCatalogos = true;

            // Tip: si tu API tiene filtros para alumnos, aplicalos acá
            alumnos = (await PersonaApi.GetAllAsync())?.ToList() ?? new();
            cursos = (await CursoApi.GetAllAsync())?.ToList() ?? new();
        }
        catch (Exception ex)
        {
            localError = $"Error al cargar catálogos: {ex.Message}";
        }
        finally
        {
            loadingCatalogos = false;
        }
    }

    private async Task SaveAsync()
    {
        try
        {
            localError = string.Empty;

            // Validaciones mínimas
            if (model.IDAlumno <= 0)
            {
                localError = "Debe seleccionar un alumno.";
                return;
            }
            if (model.IDCurso <= 0)
            {
                localError = "Debe seleccionar un curso.";
                return;
            }
            if (string.IsNullOrWhiteSpace(model.Condicion))
            {
                localError = "Debe seleccionar la condición.";
                return;
            }

            saving = true;

            if (model.IDInscripcion == 0)
            {
                await AlumnoInscripcionApi.AddAsync(model);
                await OnSuccess.InvokeAsync("Inscripción creada correctamente.");
            }
            else
            {
                await AlumnoInscripcionApi.UpdateAsync(model);
                await OnSuccess.InvokeAsync("Inscripción actualizada correctamente.");
            }

            Hide();
            await OnInscripcionChange.InvokeAsync();
        }
        catch (Exception ex)
        {
            // Tip: si tu API retorna 409 para duplicado (Alumno+Curso), podrías mapear el mensaje acá
            localError = ex.Message;
            await OnError.InvokeAsync($"Error al guardar: {ex.Message}");
        }
        finally
        {
            saving = false;
        }
    }
}
*@
@page "/personas/{numero:int}/{tipo}"
@using DTOs
@using API.Clients

@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>@($"Listado de {Tipo}")</h3>

<div class="mb-3 d-flex justify-content-between">
    <input @bind="TextoBusqueda" class="form-control w-50" placeholder="Buscar..." />
    <button class="btn btn-primary" @onclick="Agregar">Agregar @Tipo</button>
</div>

@if (Personas is null)
{
    <p>Cargando...</p>
}
else if (!Personas.Any())
{
    <p>No se encontraron @Tipo.</p>
}
else
{
    <table class="table table-striped align-middle">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Nro Doc</th>
                <th>Email</th>
                <th>Teléfono</th>
                <th>Fecha Nac.</th>
                <th>Legajo</th>
                <th class="text-center">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var persona in Personas)
            {
                <tr>
                    <td>@persona.IDPersona</td>
                    <td>@persona.Nombre</td>
                    <td>@persona.Apellido</td>
                    <td>@persona.NroDoc</td>
                    <td>@persona.Email</td>
                    <td>@persona.Telefono</td>
                    <td>@persona.FechaNac</td>
                    <td>@persona.Legajo</td>
                    <td class="text-center">
                        <button class="btn btn-sm btn-warning me-2" @onclick="() => Modificar(persona)">
                            <i class="bi bi-pencil-square"></i> Editar
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => Eliminar(persona)">
                            <i class="bi bi-trash"></i> Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<PersonaModal @ref="Modal" 
OnPersonaChange="CargarPersonasAsync" />

@code {
    [Parameter] public int Numero { get; set; } // 1 = Alumno, 2 = Profesor
    [Parameter] public string Tipo { get; set; } = string.Empty;

    private List<PersonaDTO>? Personas;
    private string TextoBusqueda = string.Empty;

    private PersonaModal? Modal;

    protected override async Task OnInitializedAsync()
    {
        await CargarPersonasAsync();
    }

    private async Task CargarPersonasAsync()
    {
        try
        {
            Personas = null;
            StateHasChanged();

            if (Numero == 1)
                Personas = (await PersonaApi.GetAllAlumnosAsync()).ToList();
            else if (Numero == 2)
                Personas = (await PersonaApi.GetAllProfesoresAsync()).ToList();
            else
                Personas = (await PersonaApi.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar la lista de {Tipo}: {ex.Message}");
        }
    }

    private async Task Eliminar(PersonaDTO persona)
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Desea eliminar este {Tipo}?");
        if (confirm)
        {
            try
            {
                await PersonaApi.DeleteAsync(persona.IDPersona);
                await JSRuntime.InvokeVoidAsync("alert", $"{Tipo} eliminado exitosamente.");
                await CargarPersonasAsync();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error al eliminar {Tipo}: {ex.Message}");
            }
        }
    }

    private void Agregar()
    {
        Modal?.ShowAddModal(Numero, Tipo);
    }

    private void Modificar(PersonaDTO persona)
    {
        Modal?.ShowEditModal(persona, Numero, Tipo);
    }
}

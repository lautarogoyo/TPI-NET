@*
@page "/personas"
@using DTOs
@using API.Clients
@inject IJSRuntime JSRuntime
@inject PersonaApi PersonaApi
@inject PlanApi PlanApi
@rendermode InteractiveServer

<PageTitle>Personas</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h3>Personas</h3>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    @errorMessage
                    <button type="button" class="btn btn-close" @onclick="() => errorMessage = string.Empty"></button>
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @successMessage
                    <button type="button" class="btn btn-close" @onclick="() => successMessage = string.Empty"></button>
                </div>
            }

            <div class="mb-3">
                <button class="btn btn-primary" @onclick="OpenAddModal">
                    <i class="fas fa-plus"></i> Agregar
                </button>
            </div>

            @if (loading)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover align-middle">
                        <thead class="table-dark">
                            <tr>
                                <th>Id</th>
                                <th>Nombre</th>
                                <th>Apellido</th>
                                <th>Email</th>
                                <th>Teléfono</th>
                                <th>Fecha Nac.</th>
                                <th>Legajo</th>
                                <th>Tipo</th>
                                <th>Plan (Descripción)</th>
                                <th style="width:180px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (personas is { Count: > 0 })
                            {
                                @foreach (var per in personas)
                                {
                                    <tr>
                                        <td>@per.IDPersona</td>
                                        <td>@per.Nombre</td>
                                        <td>@per.Apellido</td>
                                        <td>@per.Email</td>
                                        <td>@per.Telefono</td>
                                        <td>@(per.FechaNac.ToString("dd/MM/yyyy"))</td>
                                        <td>@per.Legajo</td>
                                        <td>@per.TipoPersona</td>
                                        <td>@GetPlanDesc(per.IDPlan)</td>
                                        <td class="text-end">
                                            <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => OpenEditModal(per)">
                                                <i class="fas fa-edit"></i> Editar
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(per)">
                                                <i class="fas fa-trash"></i> Eliminar
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="10" class="text-center text-muted">No hay personas.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<PersonaModal @ref="modal"
                       OnPersonaChanged="LoadPersonas"
                       OnSuccess="ShowSuccess"
                       OnError="ShowError" />

@code {
    private List<PersonaDTO>personas = new();
    private List<PlanDTO> planes = new();

    private Dictionary<int, string> planById = new();

    private bool loading = true;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    // Ajustá el namespace del modal según dónde lo coloques
    private PersonaModal modal = null!;

    protected override async Task OnInitializedAsync()
        => await LoadPersonas();

    
    private async Task LoadPersonas()
    {
        try
        {
            loading = true;
            errorMessage = string.Empty;

            // Trae personas con su Plan (ideal que la API ya incluya la navegación)
            personas = (await PersonaApi.GetAllAsync())?.ToList() ?? new();
            planes = (await PlanApi.GetAllAsync())?.ToList() ?? new();

            planById = planes.ToDictionary(p => p.IDPlan, p => p.DescPlan);

            successMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar personas: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private string GetPlanDesc(int idPlan)
       => planById.TryGetValue(idPlan, out var desc) ? desc : "(sin plan)";
    private Task OpenAddModal() => modal.ShowAddModal();

    private Task OpenEditModal(PersonaDTO per) => modal.ShowEditModal(per);

    private async Task ConfirmDelete(PersonaDTO per)
    {
        var ok = await JSRuntime.InvokeAsync<bool>(
            "confirm",
            $"¿Está seguro que desea eliminar a \"{per.Apellido}, {per.Nombre}\" (ID {per.IDPersona})?");
        if (ok)
            await DeletePersona(per.IDPersona);
    }

    private async Task DeletePersona(int id)
    {
        try
        {
            await PersonaApi.DeleteAsync(id);
            successMessage = "Persona eliminada exitosamente.";
            await LoadPersonas();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al eliminar: {ex.Message}";
        }
    }

    private void ShowSuccess(string msg) => successMessage = msg;
    private void ShowError(string msg) => errorMessage = msg;
}
*@
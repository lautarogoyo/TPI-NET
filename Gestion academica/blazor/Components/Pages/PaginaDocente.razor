@page "/docente/{idP:int}"
@using DTOs
@using API.Clients
@inject IJSRuntime JSRuntime
@inject DocenteCursoApi DocenteCurso
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Mis cursos</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h3>Mis cursos</h3>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    @errorMessage
                    <button type="button" class="btn btn-close" @onclick="() => errorMessage = string.Empty"></button>
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @successMessage
                    <button type="button" class="btn btn-close" @onclick="() => successMessage = string.Empty"></button>
                </div>
            }

            @if (loading)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover align-middle">
                        <thead class="table-dark">
                            <tr>
                                <th>Curso</th>
                                <th>Materia</th>
                                <th>Comisión</th>
                                <th>Año</th>
                                <th>Cargo</th>
                                <th style="width:200px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (dc is { Count: > 0 })
                            {
                                @foreach (var dc in dc)
                                {
                                    <tr>
                                        <td>@dc.DescCurso</td>
                                        <td>@dc.DescMateria</td>
                                        <td>@dc.DescComision</td>
                                        <td>@dc.Anio</td>
                                        <td>@dc.Cargo</td>
                                        <td class="text-end">
                                            <button class="btn btn-sm btn-outline-primary me-1"
                                                    @onclick="() => VerInscriptos(dc)">
                                                <i class="fas fa-users"></i> Ver inscriptos
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="7" class="text-center text-muted">No tenés ningún curso asociado.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public int IdP { get; set; }
    private List<DocenteCursoDTO> dc = new();

    private bool loading = true;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    protected override async Task OnInitializedAsync()
        => await LoadCursos();

    private async Task LoadCursos()
    {
        try
        {
            loading = true;
            errorMessage = string.Empty;

            dc = await DocenteCursoApi.GetByDocente(IdP);

            successMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar cursos: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private void VerInscriptos(DocenteCursoDTO dc)
    {
        Navigation.NavigateTo($"/docente/{dc.IDCurso}/{dc.DescCurso}/inscripciones");

    }

    private void ShowSuccess(string msg) => successMessage = msg;
    private void ShowError(string msg) => errorMessage = msg;
}

